<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya


class AlignWidget(pya.QWidget):
    def __init__(self, alignUI = True, snapUI = True, rotateUI = True, booleanUI = False, distributeUI = True, parent = None):
        super(AlignWidget, self).__init__(parent)  
        self.firstObj = None
        self.initUI(alignUI, snapUI, rotateUI, booleanUI, distributeUI)
        
        
    def initUI(self, alignUI, snapUI, rotateUI, booleanUI, distributeUI):
        columnSpacing            = 8
        rowSpacing               = 8
        categorySpacing          = 20
        iconPath                 = r"C:\Users\scott\localsend\Icon\%s.png"
        
        self.alignmentLB         = TitleLB("Alignment")
        self.snapLB              = TitleLB("Snap")
        self.rotationLB          = TitleLB("Rotate")
        self.booleanLB           = TitleLB("Boolean")
        self.distributeLB        = TitleLB("Distribute")
        self.configLB            = TitleLB("Configuration")       
        
        self.alignLeftPB         = SquarePB(iconPath % "alignLeft",         lambda : self.alignSnap("alignLeft",         self.useVisibleLayers()))
        self.alignCenterPB       = SquarePB(iconPath % "alignCenter",       lambda : self.alignSnap("alignCenter",       self.useVisibleLayers()))
        self.alignRightPB        = SquarePB(iconPath % "alignRight",        lambda : self.alignSnap("alignRight",        self.useVisibleLayers()))
        
        self.alignTopPB          = SquarePB(iconPath % "alignTop",          lambda : self.alignSnap("alignTop",          self.useVisibleLayers()))
        self.alignMiddlePB       = SquarePB(iconPath % "alignMiddle",       lambda : self.alignSnap("alignMiddle",       self.useVisibleLayers()))
        self.alignBottomPB       = SquarePB(iconPath % "alignBottom",       lambda : self.alignSnap("alignBottom",       self.useVisibleLayers()))

        self.alignTopLeftPB      = SquarePB(iconPath % "alignTopLeft",      lambda : self.alignSnap("alignTopLeft",      self.useVisibleLayers()))
        self.alignTopCenterPB    = SquarePB(iconPath % "alignTopCenter",    lambda : self.alignSnap("alignTopCenter",    self.useVisibleLayers()))
        self.alignTopRightPB     = SquarePB(iconPath % "alignTopRight",     lambda : self.alignSnap("alignTopRight",     self.useVisibleLayers()))
        
        self.alignMiddleLeftPB   = SquarePB(iconPath % "alignMiddleLeft",   lambda : self.alignSnap("alignMiddleLeft",   self.useVisibleLayers()))
        self.alignMiddleCenterPB = SquarePB(iconPath % "alignMiddleCenter", lambda : self.alignSnap("alignMiddleCenter", self.useVisibleLayers()))
        self.alignMiddleRightPB  = SquarePB(iconPath % "alignMiddleRight",  lambda : self.alignSnap("alignMiddleRight",  self.useVisibleLayers()))
        
        self.alignBottomLeftPB   = SquarePB(iconPath % "alignBottomLeft",   lambda : self.alignSnap("alignBottomLeft",   self.useVisibleLayers()))
        self.alignBottomCenterPB = SquarePB(iconPath % "alignBottomCenter", lambda : self.alignSnap("alignBottomCenter", self.useVisibleLayers()))
        self.alignBottomRightPB  = SquarePB(iconPath % "alignBottomRight",  lambda : self.alignSnap("alignBottomRight",  self.useVisibleLayers()))
        
        self.snapLeftPB          = SquarePB(iconPath % "snapLeft",          lambda : self.alignSnap("snapLeft",          self.useVisibleLayers()))
        self.snapRightPB         = SquarePB(iconPath % "snapRight",         lambda : self.alignSnap("snapRight",         self.useVisibleLayers()))
        
        self.snapTopPB           = SquarePB(iconPath % "snapTop",           lambda : self.alignSnap("snapTop",           self.useVisibleLayers()))
        self.snapBottomPB        = SquarePB(iconPath % "snapBottom",        lambda : self.alignSnap("snapBottom",        self.useVisibleLayers()))
        self.snapDummyPB         = SquarePB(iconPath % "snapDummy",         lambda : self.alignSnap("snapDummy",         self.useVisibleLayers()))
        
        self.snapTopLeftPB       = SquarePB(iconPath % "snapTopLeft",       lambda : self.alignSnap("snapTopLeft",       self.useVisibleLayers()))
        self.snapTopRightPB      = SquarePB(iconPath % "snapTopRight",      lambda : self.alignSnap("snapTopRight",      self.useVisibleLayers()))
        
        self.snapBottomLeftPB    = SquarePB(iconPath % "snapBottomLeft",    lambda : self.alignSnap("snapBottomLeft",    self.useVisibleLayers()))
        self.snapBottomRightPB   = SquarePB(iconPath % "snapBottomRight",   lambda : self.alignSnap("snapBottomRight",   self.useVisibleLayers()))
        
        self.distributeHPB       = SquarePB(iconPath % "distributeH",       lambda : self.distrubuteH(True, self.useVisibleLayers()))
        self.distributeVPB       = SquarePB(iconPath % "distributeV",       lambda : self.distrubuteV(True, self.useVisibleLayers()))
        
        self.booleanMergePB      = SquarePB(iconPath % "booleanMerge")
        self.booleanIntersectPB  = SquarePB(iconPath % "booleanIntersect")
        self.booleanSubstractPB  = SquarePB(iconPath % "booleanSubstract")
        self.booleanSeperatePB   = SquarePB(iconPath % "booleanSeperate")
               
        self.rotateCCW90PB       = SquarePB(iconPath % "rotateCCW90",       lambda : self.rotateFlipShape( 90, False, False, True))
        self.rotateCW90PB        = SquarePB(iconPath % "rotateCW90",        lambda : self.rotateFlipShape(-90, False, False, True))
        self.flipHorizontalPB    = SquarePB(iconPath % "flipHorizontal",    lambda : self.rotateFlipShape(  0,  True, False, True))
        self.flipVerticalPB      = SquarePB(iconPath % "flipVertical",      lambda : self.rotateFlipShape(  0, False,  True, True))
        
        self.configUseAllRB      = pya.QRadioButton("Use all layers for align/snap")
        self.configUseVisRB      = pya.QRadioButton("Use visible layers only for align/snap")
        self.configRotAllRB      = pya.QRadioButton("Rotate entire selection")
        self.configRotEachRB     = pya.QRadioButton("Rotate each shape")

        self.donePB              = pya.QPushButton("Done")

        self.alignGrid           = pya.QGridLayout()
        self.snapGrid            = pya.QGridLayout()
        self.rotateGrid          = pya.QGridLayout()
        self.boolGrid            = pya.QGridLayout()
        self.distGrid            = pya.QGridLayout()
        self.configGrid          = pya.QGridLayout()
        self.bottomBarGrid       = pya.QGridLayout()
        self.grid                = pya.QGridLayout()

        self.configAlignSnapRG   = pya.QButtonGroup()
        self.configRotateRG      = pya.QButtonGroup()
        
        self.configAlignSnapRG.addButton(self.configUseAllRB)
        self.configAlignSnapRG.addButton(self.configUseVisRB)
        self.configRotateRG.addButton(self.configRotAllRB)
        self.configRotateRG.addButton(self.configRotEachRB)  
        self.configUseAllRB.setChecked(True)
        self.configRotAllRB.setChecked(True)
        
        self.donePB.clicked(lambda : self.close())
        
        self.alignGrid.addWidget(self.alignmentLB,         0, 0, 1, 5)
        self.alignGrid.addWidget(self.alignTopLeftPB,      1, 2, 1, 1)
        self.alignGrid.addWidget(self.alignTopCenterPB,    1, 3, 1, 1)
        self.alignGrid.addWidget(self.alignTopRightPB,     1, 4, 1, 1)
        self.alignGrid.addWidget(self.alignTopPB,          1, 0, 1, 1)
             
        self.alignGrid.addWidget(self.alignMiddleLeftPB,   2, 2, 1, 1)
        self.alignGrid.addWidget(self.alignMiddleCenterPB, 2, 3, 1, 1)
        self.alignGrid.addWidget(self.alignMiddleRightPB,  2, 4, 1, 1)
        self.alignGrid.addWidget(self.alignMiddlePB,       2, 0, 1, 1)
             
        self.alignGrid.addWidget(self.alignBottomLeftPB,   3, 2, 1, 1)
        self.alignGrid.addWidget(self.alignBottomCenterPB, 3, 3, 1, 1)
        self.alignGrid.addWidget(self.alignBottomRightPB,  3, 4, 1, 1)
        self.alignGrid.addWidget(self.alignBottomPB,       3, 0, 1, 1)
             
        self.alignGrid.addWidget(self.alignLeftPB,         5, 2, 1, 1)
        self.alignGrid.addWidget(self.alignCenterPB,       5, 3, 1, 1)
        self.alignGrid.addWidget(self.alignRightPB,        5, 4, 1, 1)
        self.alignGrid.setColumnMinimumWidth(1, columnSpacing)
        self.alignGrid.setRowMinimumHeight(4, rowSpacing)        
        self.alignGrid.setRowStretch(6, 1)

        
        self.snapGrid.addWidget(self.snapLB,               0, 0, 1, 3)                
        self.snapGrid.addWidget(self.snapTopLeftPB,        1, 0, 1, 1)
        self.snapGrid.addWidget(self.snapTopPB,            1, 1, 1, 1)
        self.snapGrid.addWidget(self.snapTopRightPB,       1, 2, 1, 1)

        self.snapGrid.addWidget(self.snapLeftPB,           2, 0, 1, 1)
        self.snapGrid.addWidget(self.snapDummyPB,          2, 1, 1, 1)
        self.snapGrid.addWidget(self.snapRightPB,          2, 2, 1, 1)
        
        self.snapGrid.addWidget(self.snapBottomLeftPB,     3, 0, 1, 1)
        self.snapGrid.addWidget(self.snapBottomPB,         3, 1, 1, 1)
        self.snapGrid.addWidget(self.snapBottomRightPB,    3, 2, 1, 1)
        self.snapGrid.setRowStretch(4, 1)


        self.rotateGrid.addWidget(self.rotationLB,         0, 0, 1, 1)  
        self.rotateGrid.addWidget(self.rotateCCW90PB,      1, 0, 1, 1)
        self.rotateGrid.addWidget(self.rotateCW90PB,       2, 0, 1, 1)
        self.rotateGrid.addWidget(self.flipHorizontalPB,   3, 0, 1, 1)     
        self.rotateGrid.addWidget(self.flipVerticalPB,     4, 0, 1, 1)
        self.rotateGrid.setRowStretch(5, 1)
    
     
        self.boolGrid.addWidget(self.booleanLB,            0, 0, 1, 1)     
        self.boolGrid.addWidget(self.booleanMergePB,       1, 0, 1, 1)
        self.boolGrid.addWidget(self.booleanIntersectPB,   2, 0, 1, 1)
        self.boolGrid.addWidget(self.booleanSubstractPB,   3, 0, 1, 1)     
        self.boolGrid.addWidget(self.booleanSeperatePB,    4, 0, 1, 1)
        self.boolGrid.setRowStretch(5, 1)        


        self.distGrid.addWidget(self.distributeLB,         0, 0, 1, 1)
        self.distGrid.addWidget(self.distributeHPB,        1, 0, 1, 1)
        self.distGrid.addWidget(self.distributeVPB,        2, 0, 1, 1)
        self.distGrid.setRowStretch(3, 1) 
        
        self.configGrid.addWidget(self.configLB,           0, 0, 1, 8)
        self.configGrid.addWidget(self.configUseAllRB,     1, 0, 1, 4)
        self.configGrid.addWidget(self.configUseVisRB,     2, 0, 1, 4)
        self.configGrid.addWidget(self.configRotAllRB,     1, 3, 1, 4)
        self.configGrid.addWidget(self.configRotEachRB,    2, 3, 1, 4)
        self.configGrid.addWidget(self.donePB,             2, 7, 1, 1)
        
        uiDict = {
            self.alignGrid  : alignUI,
            self.snapGrid   : snapUI, 
            self.rotateGrid : rotateUI, 
            self.boolGrid   : booleanUI, 
            self.distGrid   : distributeUI
        }
        
        uiCount = 0
        for ui in uiDict:
            if uiDict[ui]:
                self.grid.addLayout(ui, 0, uiCount * 2, 1, 1)
                self.grid.setColumnMinimumWidth((uiCount * 2) + 1 , categorySpacing)
                uiCount += 1
                 
        self.grid.addLayout(self.configGrid,1, 0, 1, (uiCount * 2))        
                   
        self.grid.setHorizontalSpacing(2)
        self.grid.setVerticalSpacing(2)
        self.setLayout(self.grid)
        self.setWindowFlags(pya.Qt.WindowStaysOnTopHint)
        
    def selectedShapes(self):
        return sorted([s for s in layoutView.each_object_selected()], key=lambda s: s.seq)
        
    def rotateFlipShape(self, rotate = 0, flipH = False, flipV = False, applyEach = False):
    
        layoutView.transaction("Rotation %.2f %s%s" % (rotate, ("H" if flipH else ""), ("V" if flipH else "")))
        try:
            if applyEach:
                for o in self.selectedShapes():
                    item      = (o.inst() if o.is_cell_inst() else o.shape)
                    oldCenter = item.bbox().center()
                    trans     = pya.ICplxTrans(1, rotate, False, 0, 0)
                    trans     = trans * pya.Trans.M90  if flipH else trans
                    trans     = trans * pya.Trans.M0   if flipV else trans
                    item.transform(trans)
                    
                    newCenter = item.bbox().center()
                    item.transform(pya.Trans(oldCenter.x - newCenter.x, oldCenter.y - newCenter.y))
                    
            else:
                groupBox = pya.Box()  
                for o in self.selectedShapes():
                    item      = (o.inst()if o.is_cell_inst() else o.shape)
                    groupBox += item.bbox()
                    
                groupCenter = groupBox.center()
                for o in self.selectedShapes():
                    item      = (o.inst()if o.is_cell_inst() else o.shape)                
                    trans     = pya.ICplxTrans(1, rotate, False, 0, 0)
                    trans     = trans * pya.Trans.M90  if flipH else trans
                    trans     = trans * pya.Trans.M0   if flipV else trans
                    item.transform(trans)
                    
        finally:
            layoutView.commit()
            
    def visibleLayers(self):
        return [    layerProp.layer_index() for layerProp in layoutView.each_layer() if layerProp.visible]

    def useVisibleLayers(self):
        return self.configUseVisRB.isChecked()

    def instVisibleBBox(self, inst, useVisibleLayers = False):    
        box = pya.Box()      
        if useVisibleLayers:
            for layer_index in self.visibleLayers():
                box += inst.bbox(layer_index)
        else:
            box = inst.bbox()   
        return box                 

    def distrubute(self, distributeH = False, distributeV = False, centerPitch = True, useVisibleLayers = False):
        
        sortedShapes = sorted(self.selectedShapes(), key = lambda o : (self.instVisibleBBox(o.inst(), useVisibleLayers) if o.is_cell_inst() else o.shape.bbox()).center().x)
        oFirst       = sortedShapes[ 0]
        oLast        = sortedShapes[-1]
        oFirstBox    = self.instVisibleBBox(oFirst.inst(), useVisibleLayers) if oFirst.is_cell_inst() else oFirst.shape.bbox()
        oLastBox     = self.instVisibleBBox(oLast.inst(),  useVisibleLayers) if  oLast.is_cell_inst() else  oLast.shape.bbox()
        oFirstBox    = oFirstBox.transformed(pya.Trans(oFirst.trans().disp.x, oFirst.trans().disp.y))
        oLastBox     = oLastBox.transformed( pya.Trans(oLast.trans().disp.x,  oLast.trans().disp.y))
        oFirstCX     = oFirstBox.center().x
        oLastCX      = oLastBox.center().x
        oFirstCY     = oFirstBox.center().y
        oLastCY      = oLastBox.center().y
        objCount     = len(sortedShapes)
        sepprationH  = int((oLastCX - oFirstCX)/(objCount-1))
        sepprationV  = int((oLastCY - oFirstCY)/(objCount-1))
        
        layoutView.transaction("ditribute %s%s" % (("H" if distributeH else ""), ("V" if distributeV else "")))
        try:
            
            for index, o in enumerate(sortedShapes):
                item   = (o.inst() if o.is_cell_inst() else o.shape)
                box    = (self.instVisibleBBox(o.inst(), useVisibleLayers) if o.is_cell_inst() else o.shape.bbox())
                box    = box.transformed(pya.Trans(o.trans().disp.x, o.trans().disp.y))
                shiftH = oFirstCX + (index * sepprationH) - box.center().x
                shiftV = oFirstCY + (index * sepprationV) - box.center().y
                transH = pya.Trans(shiftH, 0)
                transV = pya.Trans(0,      shiftV)
                
                if distributeH:
                    item.transform(transH)
                if distributeV:
                    item.transform(transV)
                
        finally:
            layoutView.commit()

                
    def distrubuteH(self, centerPitch = True, useVisibleLayers = False):
        self.distrubute(distributeH = True, distributeV = False, centerPitch = centerPitch, useVisibleLayers = useVisibleLayers)
        
        
    def distrubuteV(self, centerPitch = True, useVisibleLayers = False):           
        self.distrubute(distributeH = False, distributeV = True, centerPitch = centerPitch, useVisibleLayers = useVisibleLayers)
        
    def alignSnap(self, transText, useVisibleLayers = False):
        firstBox   = pya.Box()
        layoutView.transaction(transText)
        try:
            
            for o in self.selectedShapes(): 
    
                if firstBox.empty():
                    firstBox = self.instVisibleBBox(o.inst(), useVisibleLayers) if o.is_cell_inst() else o.shape.bbox()
                    firstBox = firstBox.transformed(pya.Trans(o.trans().disp.x, o.trans().disp.y))
    
                else:
                    secondBox         = self.instVisibleBBox(o.inst(), useVisibleLayers) if o.is_cell_inst() else o.shape.bbox()
                    secondBox         = secondBox.transformed(pya.Trans(o.trans().disp.x, o.trans().disp.y))
                    
                    transXAlignLeft   = firstBox.left       - secondBox.left       
                    transXAlignCenter = firstBox.center().x - secondBox.center().x
                    transXAlignright  = firstBox.right      - secondBox.right      
                    
                    transYAlignTop    = firstBox.top        - secondBox.top        
                    transYAlignMiddle = firstBox.center().y - secondBox.center().y 
                    transYAlignBottom = firstBox.bottom     - secondBox.bottom     
    
                    transXSnapLeft    = firstBox.left       - secondBox.right      
                    transXSnapRight   = firstBox.right      - secondBox.left       
                    
                    transYSnapTop     = firstBox.top        - secondBox.bottom     
                    transYSnapBottom  = firstBox.bottom     - secondBox.top        
                                               
                    transDict = {
                        "alignTopLeft"      : pya.Trans(transXAlignLeft,   transYAlignTop),
                        "alignTopCenter"    : pya.Trans(transXAlignCenter, transYAlignTop),
                        "alignTopRight"     : pya.Trans(transXAlignright,  transYAlignTop),
    
                        "alignMiddleLeft"   : pya.Trans(transXAlignLeft,   transYAlignMiddle),
                        "alignMiddleCenter" : pya.Trans(transXAlignCenter, transYAlignMiddle),
                        "alignMiddleRight"  : pya.Trans(transXAlignright,  transYAlignMiddle),
                        
                        "alignBottomLeft"   : pya.Trans(transXAlignLeft,   transYAlignBottom),
                        "alignBottomCenter" : pya.Trans(transXAlignCenter, transYAlignBottom),
                        "alignBottomRight"  : pya.Trans(transXAlignright,  transYAlignBottom),
                                      
                        "alignTop"          : pya.Trans(0,                 transYAlignTop),                    
                        "alignMiddle"       : pya.Trans(0,                 transYAlignMiddle),
                        "alignBottom"       : pya.Trans(0,                 transYAlignBottom),
                        
                        "alignLeft"         : pya.Trans(transXAlignLeft,   0),
                        "alignCenter"       : pya.Trans(transXAlignCenter, 0),
                        "alignRight"        : pya.Trans(transXAlignright,  0),
                        
                        "snapTop"           : pya.Trans(0,                 transYSnapTop),
                        "snapBottom"        : pya.Trans(0,                 transYSnapBottom),
                        
                        "snapLeft"          : pya.Trans(transXSnapLeft,    0),
                        "snapRight"         : pya.Trans(transXSnapRight,   0),
    
                        "snapTopLeft"       : pya.Trans(transXSnapLeft,    transYSnapTop),
                        "snapBottomLeft"    : pya.Trans(transXSnapLeft,    transYSnapBottom),
                        "snapTopRight"      : pya.Trans(transXSnapRight,   transYSnapTop),
                        "snapBottomRight"   : pya.Trans(transXSnapRight,   transYSnapBottom)              
                    }
                    (o.inst() if o.is_cell_inst() else o.shape).transform(transDict[transText])
   
        finally:
            layoutView.commit()
            
            
    def keyPressEvent(self, event):
        if event.type() == pya.QEvent.KeyPress:
            if event.key() in (pya.Qt.Key_Return, pya.Qt.Key_Escape, pya.Qt.Key_Enter):
                self.close()
           
    
        
class TitleLB(pya.QLabel):
    def __init__(self, title, parent = None):
        super(TitleLB, self).__init__(title)    
        self.setAlignment(pya.Qt.AlignCenter)
        self.setFixedHeight(20)
        self.setStyleSheet(
        """
            QLabel{
                background-color : #dfdfdf;
            }
        """
        )
 
        

class SquarePB(pya.QPushButton):
    def __init__(self, icon = None, bindFunction = None, parent = None):
        super(SquarePB, self).__init__()    
        self.setFixedSize(50, 50)    
        self.setStyleSheet(
        """
            QPushButton {
                background: #efefef;
                border: 1px solid transparent;
                border-radius: 2px;
            }
            
            QPushButton::hover {
                border: 1px solid #33ccaa;
            }
            
            QPushButton::pressed {
                border: 1px solid #009966;
            }
        """
        )

        if icon:
            self.setIcon(pya.QIcon(icon))
            self.setIconSize(pya.QSize(40, 40))
            
        if bindFunction:
            self.clicked(bindFunction)


def showWindow():
    screenRect    = pya.QApplication.desktop().screenGeometry()
    height        = screenRect.height
    width         = screenRect.width
    widget        = AlignWidget()
    widget.move(pya.QPoint(200, height -450))
    widget.show()


mainWindow    = pya.Application.instance().main_window()
screenRect    = pya.QApplication.desktop().screenGeometry()
layoutView    = None
cellView      = None
layout        = None 



def callWidget():

    layoutView    = mainWindow.current_view()
    if layoutView:
        cellView      = layoutView.active_cellview()
        layout        = cellView.layout()
        height        = screenRect.height
        width         = screenRect.width
        widget        = AlignWidget()
        widget.move(pya.QPoint(200, height -450))
        widget.show()
    else:
        msgBox = pya.QMessageBox()
        msgBox.setText("No Active View.")
        msgBox.exec_()       

menu      = pya.Application.instance().main_window().menu()
act       = pya.Action()
act.title = "Align Tool"
menu.insert_item("tools_menu.end", "Align Tool", act)
act.on_triggered(lambda : callWidget())</text>
</klayout-macro>
